# -*- coding: utf-8 -*-
"""Modelado_Datos_Covid_19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EP5VhneC4EkMC_-hQj2rLCXH7WRuHerG

**Pronostico de la evolución de casos activos de SARS-CoV-2 en Colombia**

El nuevo Coronavirus (COVID-19) ha sido catalogado por la Organización Mundial de la Salud como una emergencia en salud pública de importancia internacional (ESPII). Se han identificado casos en todos los continentes y, el 6 de marzo se confirmó el primer caso en Colombia.De acuerdo con la información aportada por el Instituto Nacional de Salud, para el mes de agosto ya se ha confirmado alrededor de 530000 casos con una recuperación del alrededor del 67% de la población y una tasa de mortalidad del 3.2%.

Con el aumento de casos activos en Colombia, se pretende genenerar una herramienta de reporte que permita visualizar predicciones en el corto y mediano plazo del total de casos confirmados, nuevos casos, casos activos, recuperados y muertes para las cinco principales ciudades de Colombia, utilizando técnicas estadísticas, de inteligencia artificial o modelos híbridos.
"""

#pip install sodapy

"""### Importar librerias"""

# Commented out IPython magic to ensure Python compatibility.
import os
import kaleido
from sodapy import Socrata
import numpy as np 
import re
import matplotlib.pyplot as plt 
import matplotlib.colors as mcolors
import seaborn as sns
import pandas as pd 
import random
import math
import time
import datetime as dt
from datetime import timedelta
import operator 
plt.style.use('fivethirtyeight')
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
#!pip install plotly
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score,silhouette_samples
import statsmodels.api as sm
from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing
from statsmodels.tsa.stattools import adfuller
#pip install pyramid-arima
from pyramid.arima import auto_arima
std=StandardScaler()
#pd.set_option('display.float_format', lambda x: '%.6f' % x)

covid_19  = Socrata("www.datos.gov.co", None)
results = covid_19.get_all("gt2j-8ykr", limit=800000)

"""### Llama el servicio de Datos.gov.co para consultar los datos con formato .json"""

results_df = pd.DataFrame.from_records(results)
#results_df.describe()

"""### Convertir el conjunto de datos de .json a Dataframe de Pandas"""

#results_df.tail(5)

"""# Análisis exploratorio de los datos"""

#results_df.count()

#results_df.shape

#results_df.isnull().sum()

#results_df.head()

#results_df.dtypes

"""#Limpieza, transformación y filtrado del conjunto de datos"""

df = (results_df[results_df["estado"] != "N/A"])[["id_de_caso", "fecha_de_notificaci_n", "ciudad_de_ubicaci_n", "atenci_n", "edad", "sexo", "tipo", "estado", "fis", "fecha_diagnostico", "fecha_recuperado", "fecha_reporte_web", "tipo_recuperaci_n", "fecha_de_muerte"]]

df.columns = ["ID_de_caso", "Fecha_de_notificación", "Ciudad_de_ubicación", "atención", "Edad", "Sexo", "Tipo", "Estado", "FIS", "Fecha_diagnostico", "Fecha_recuperado", "fecha_reporte_web", "Tipo_recuperación", "Fecha_de_muerte"]

df = df[df.Ciudad_de_ubicación.isin(["Bogotá D.C.", "Medellín", "Barranquilla", "Cali", "Cartagena de Indias"])]

#df.shape

#df.isnull().sum()

"""### Cambio del formato de la fecha"""

new_df = df[["fecha_reporte_web", "atención", "Ciudad_de_ubicación"]]

dateRegex = re.compile(r"[a-zA-Z]\d\d\:\d\d\:\d\d\.\d\d\d")

new_df = new_df.replace(dateRegex, "",regex=True, inplace=False)
new_df['fecha_reporte_web'] = pd.to_datetime(new_df['fecha_reporte_web'])
#new_df.head(5)

"""### Dataframe para procesamiento"""

new_df["atención"] = new_df["atención"].replace(to_replace=["Casa", "Hospital", "Hospital UCI", "N/A"], value="ACTIVOS")
new_df["atención"] = new_df["atención"].replace(to_replace=["Recuperado"], value="RECUPERADOS")
new_df["atención"] = new_df["atención"].replace(to_replace=["Fallecido"], value="MUERTES")

confirmados = new_df
recuperados = new_df[new_df["atención"] == "RECUPERADOS"]
activos = new_df[new_df["atención"] == "ACTIVOS"]
muertos = new_df[new_df["atención"] == "MUERTES"]

new_df["Confirmados"]=1
new_df["Recuperados"]= np.where(new_df["atención"] == "RECUPERADOS", 1, 0)
new_df["Muertos"]= np.where(new_df["atención"] == "MUERTES", 1, 0)
new_df["Activos"]= np.where(new_df["atención"] == "ACTIVOS", 1, 0)
#new_df.head()

new_df["fecha_reporte_web"]=pd.to_datetime(new_df["fecha_reporte_web"])

"""# Filtrado barranquilla"""

df_agrupado_Barr = new_df[new_df['Ciudad_de_ubicación'] == 'Barranquilla']
#df_agrupado_Barr.head()

df_agrupado2_Barr= df_agrupado_Barr.groupby(["fecha_reporte_web"]).agg({"Confirmados":'sum',"Recuperados":'sum',"Activos":'sum',"Muertos":'sum'})
#df_agrupado2_Barr.head()

df_agrupado2_Barr["Confirmados_acum"] =df_agrupado2_Barr["Confirmados"].cumsum()
df_agrupado2_Barr["Recuperados_acum"] =df_agrupado2_Barr["Recuperados"].cumsum()
df_agrupado2_Barr["Activos_acum"] =df_agrupado2_Barr["Activos"].cumsum()
df_agrupado2_Barr["Muertos_acum"] =df_agrupado2_Barr["Muertos"].cumsum()
#df_agrupado2_Barr.head()

df_agrupado2_Barr["Días"]=df_agrupado2_Barr.index-df_agrupado2_Barr.index.min()
df_agrupado2_Barr["Días"]=df_agrupado2_Barr["Días"].dt.days

"""#Resumen general"""
"""
print("Informacion General Barranquilla")

print("Número total de casos confirmados en Barranquilla: ",df_agrupado2_Barr["Confirmados_acum"].iloc[-1])
print("Número total de casos recuperados en Barranquilla: ",df_agrupado2_Barr["Recuperados_acum"].iloc[-1])
print("Número total de muertes en Barranquilla: ",df_agrupado2_Barr["Muertos_acum"].iloc[-1])
print("Número total de casos Activos en Barranquilla: ",df_agrupado2_Barr["Activos_acum"].iloc[-1])

print("Número aproximado de casos confirmados por día: ",np.round(df_agrupado2_Barr["Confirmados_acum"].iloc[-1]/df_agrupado2_Barr.shape[0]))
print("Número aproximado de casos recuperados por día: ",np.round(df_agrupado2_Barr["Recuperados_acum"].iloc[-1]/df_agrupado2_Barr.shape[0]))
print("Número aproximado de muertes por día: ",np.round(df_agrupado2_Barr["Muertos_acum"].iloc[-1]/df_agrupado2_Barr.shape[0]))

print("Nuevos casos confirmados: ",df_agrupado2_Barr["Confirmados_acum"].iloc[-1]-df_agrupado2_Barr["Confirmados_acum"].iloc[-2])
"""
df_agrupado2_Barr["Semana"]=df_agrupado2_Barr.index.weekofyear

semana_num=[]
semana_confirmados=[]
semana_recuperados=[]
semana_muertos=[]
w=1
for i in list(df_agrupado2_Barr["Semana"].unique()):
    semana_confirmados.append(df_agrupado2_Barr[df_agrupado2_Barr["Semana"]==i]["Confirmados"].iloc[-1])
    semana_recuperados.append(df_agrupado2_Barr[df_agrupado2_Barr["Semana"]==i]["Recuperados"].iloc[-1])
    semana_muertos.append(df_agrupado2_Barr[df_agrupado2_Barr["Semana"]==i]["Muertos"].iloc[-1])
    semana_num.append(w)
    w=w+1

fig=go.Figure()
fig.add_trace(go.Scatter(x=semana_num, y=semana_confirmados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos confirmados'))
fig.add_trace(go.Scatter(x=semana_num, y=semana_recuperados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos recuperados'))
fig.add_trace(go.Scatter(x=semana_num, y=semana_muertos,
                    mode='lines+markers',
                    name='Crecimiento semanal muertos'))
fig.update_layout(title="Crecimiento semanal por tipo de casos en Barranquilla",
                 xaxis_title="Semana",yaxis_title="Número de casos",legend=dict(x=0,y=1,traceorder="normal"))
#fig.show()

#tasa de mortalidad y recuperación

df_agrupado2_Barr["Tasa de mortalidad"]=(df_agrupado2_Barr["Muertos_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100
df_agrupado2_Barr["Tasa de recuperación"]=(df_agrupado2_Barr["Recuperados_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100

"""
print("Tasa de mortalidad promedio",df_agrupado2_Barr["Tasa de mortalidad"].mean())
print("Tasa de recuperación promedio",df_agrupado2_Barr["Tasa de recuperación"].mean())
"""

fig = make_subplots(rows=2, cols=1,
                   subplot_titles=("Tasa de recuperación", "Tasa de mortalidad"))
fig.add_trace(
    go.Scatter(x=df_agrupado2_Barr.index, y=(df_agrupado2_Barr["Recuperados_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100,name="Tasa de recuperación"),
    row=1, col=1
)
fig.add_trace(
    go.Scatter(x=df_agrupado2_Barr.index, y=(df_agrupado2_Barr["Muertos_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100,name="Tasa de mortalidad"),
    row=2, col=1
)
fig.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
fig.update_xaxes(title_text="Fecha", row=1, col=1)
fig.update_yaxes(title_text="tasa de recuperación", row=1, col=1)
fig.update_xaxes(title_text="Fecha", row=1, col=2)
fig.update_yaxes(title_text="Tasa de mortalidad", row=1, col=2)
#fig.show()

"""
print("Factor de crecimiento promedio casos confirmados: ",(df_agrupado2_Barr["Confirmados"]/df_agrupado2_Barr["Confirmados"].shift()).mean())

print("Factor de crecimiento promedio casos recuperados: ",(df_agrupado2_Barr["Recuperados"]/df_agrupado2_Barr["Recuperados"].shift()).mean())

print("Factor de crecimiento promedio muertes: ",(df_agrupado2_Barr["Muertos"]/df_agrupado2_Barr["Muertos"].shift()).mean())
"""

fig=go.Figure()
fig.add_trace(go.Scatter(x=df_agrupado2_Barr.index, y=df_agrupado2_Barr["Confirmados"]/df_agrupado2_Barr["Confirmados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos confirmados'))
fig.add_trace(go.Scatter(x=df_agrupado2_Barr.index, y=df_agrupado2_Barr["Recuperados"]/df_agrupado2_Barr["Recuperados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos recuperados'))
fig.add_trace(go.Scatter(x=df_agrupado2_Barr.index, y=df_agrupado2_Barr["Muertos"]/df_agrupado2_Barr["Muertos"].shift(),
                    mode='lines',
                    name='Factor de crecimiento muertes'))
fig.update_layout(title="Factor de crecimiento casos confirmados, recuperados y muertes",
                 xaxis_title="Fecha",yaxis_title="Factor de crecimiento",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
#fig.show()

if not os.path.exists("images"):
    os.mkdir("images")

fig.write_image("images/fig4.png")
