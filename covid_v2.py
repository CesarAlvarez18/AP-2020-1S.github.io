# -*- coding: utf-8 -*-
"""Covid_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R0j5o0KTDZRRTp1-ptaQAK6GEPgtNzmv

**Pronostico de la evolución de casos activos de SARS-CoV-2 en Colombia**

El nuevo Coronavirus (COVID-19) ha sido catalogado por la Organización Mundial de la Salud como una emergencia en salud pública de importancia internacional (ESPII). Se han identificado casos en todos los continentes y, el 6 de marzo se confirmó el primer caso en Colombia.De acuerdo con la información aportada por el Instituto Nacional de Salud, para la primera semana del mes de septiembre se ha confirmado alrededor de 640000 casos con una recuperación del alrededor del 75% de la población y una tasa de mortalidad aproximada del 3.2%.

Con el aumento de casos activos en Colombia, se pretende genenerar una herramienta de reporte que permita visualizar predicciones en el corto y mediano plazo del total de casos confirmados, nuevos casos, casos activos, recuperados y muertes para las cinco principales ciudades de Colombia, utilizando técnicas estadísticas, de inteligencia artificial o modelos híbridos.
"""

#pip install sodapy

"""### Importar librerias"""

# Commented out IPython magic to ensure Python compatibility.
from sodapy import Socrata
import numpy as np 
import re
import matplotlib.pyplot as plt 
import matplotlib.colors as mcolors
import seaborn as sns
import pandas as pd 
import random
import math
import time
import datetime as dt
from datetime import timedelta
import operator 
plt.style.use('fivethirtyeight')
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
#!pip install plotly
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
import statsmodels.api as sm
import statsmodels.stats.api as sms
from statsmodels.tsa.stattools import adfuller
#!pip install pyramid-arima
from pyramid.arima import auto_arima
std=StandardScaler()

covid_19  = Socrata("www.datos.gov.co", None)
results = covid_19.get_all("gt2j-8ykr", limit=800000)

"""### Llama el servicio de Datos.gov.co para consultar los datos con formato .json"""

results_df = pd.DataFrame.from_records(results)

#results_df.describe()
#results_df.tail(5)

"""# Análisis exploratorio de los datos"""

##Exploración inicial de las columnas
#results_df.count()

#results_df.shape

##Revisión de datos nulos en las para identificar nulos en columnas de interés
#results_df.isnull().sum()

#results_df.head()

##Identificación de los tipos de datos
#results_df.dtypes

"""#Limpieza, transformación y filtrado del conjunto de datos"""

##Renombrar columnas
df = (results_df[results_df["estado"] != "N/A"])[["id_de_caso", "fecha_de_notificaci_n", "ciudad_de_ubicaci_n", "atenci_n", "edad", "sexo", "tipo", "estado", "fis", "fecha_diagnostico", "fecha_recuperado", "fecha_reporte_web", "tipo_recuperaci_n", "fecha_de_muerte"]]

df.columns = ["ID_de_caso", "Fecha_de_notificación", "Ciudad_de_ubicación", "atención", "Edad", "Sexo", "Tipo", "Estado", "FIS", "Fecha_diagnostico", "Fecha_recuperado", "fecha_reporte_web", "Tipo_recuperación", "Fecha_de_muerte"]

##Selección de las ciudades principales del conjunto de datos inicial
df = df[df.Ciudad_de_ubicación.isin(["Bogotá D.C.", "Medellín", "Barranquilla", "Cali", "Cartagena de Indias"])]

#df.shape

#df.isnull().sum()

"""### Cambio del formato de la fecha"""

##Se selecciona de todo el conjunto de datos las columnas de interés: Fecha, atención y ciudad de unicación
new_df = df[["Fecha_diagnostico", "atención", "Ciudad_de_ubicación"]]

new_df['Fecha_diagnostico'] = pd.to_datetime(new_df['Fecha_diagnostico'])
#new_df.head(5)

"""### Dataframe para procesamiento"""

##Se usa la columna atención para crear la clasificación de los casos. Los casos que se encuentra en NA se seguirán considerando como casos activos mientras no sean reportados como recuperados o muertes
new_df["atención"] = new_df["atención"].replace(to_replace=["Casa", "Hospital", "Hospital UCI", "N/A"], value="ACTIVOS")
new_df["atención"] = new_df["atención"].replace(to_replace=["Recuperado"], value="RECUPERADOS")
new_df["atención"] = new_df["atención"].replace(to_replace=["Fallecido"], value="MUERTES")

##Se creaan las columnas para procesamiento partiendo de los siguientes supuestos: 
##1. Todos los casos reportados son casos confirmados,
##2. Si un caso está reportado como recuperado no se puede clasificar como muerte o como Activo,
##3. Un caso reportado como activo no puede ser clasificado como muerto o recuperado
##4. Un caso activo no puede ser clasificado como muerto o recuperado

new_df["Confirmados"]=1
new_df["Recuperados"]= np.where(new_df["atención"] == "RECUPERADOS", 1, 0)
new_df["Muertos"]= np.where(new_df["atención"] == "MUERTES", 1, 0)
new_df["Activos"]= np.where(new_df["atención"] == "ACTIVOS", 1, 0)
#new_df.head()

new_df["Fecha_diagnostico"]=pd.to_datetime(new_df["Fecha_diagnostico"])

"""#Ciudad de Barranquilla"""

##Se filtran los datos para la ciudad de barranquilla
df_agrupado_Barr = new_df[new_df['Ciudad_de_ubicación'] == 'Barranquilla']
#df_agrupado_Barr.head()

df_agrupado2_Barr= df_agrupado_Barr.groupby(["Fecha_diagnostico"]).agg({"Confirmados":'sum',"Recuperados":'sum',"Activos":'sum',"Muertos":'sum'})
#df_agrupado2_Barr.head()

##Se crean las columnas con la frecuencia acumulada por tipo de casos

df_agrupado2_Barr["Confirmados_acum"] =df_agrupado2_Barr["Confirmados"].cumsum()
df_agrupado2_Barr["Recuperados_acum"] =df_agrupado2_Barr["Recuperados"].cumsum()
df_agrupado2_Barr["Activos_acum"] =df_agrupado2_Barr["Activos"].cumsum()
df_agrupado2_Barr["Muertos_acum"] =df_agrupado2_Barr["Muertos"].cumsum()
#df_agrupado2_Barr.head()

df_agrupado2_Barr["Días"]=df_agrupado2_Barr.index-df_agrupado2_Barr.index.min()
df_agrupado2_Barr["Días"]=df_agrupado2_Barr["Días"].dt.days

#df_agrupado2_Barr.tail(10)

##Se eliminan los últimos 4 días debido a que se observan retrasos en la información de recuperados y muertes
df_agrupado2_Barr = df_agrupado2_Barr[:-4]

#df_agrupado2_Barr.tail(10)

"""#Resumen inicial estado actual Barranquilla"""

##Se presenta un resumen general acumulado del estado actual de casos

""""
print("Informacion General Barranquilla")
print("Número total de casos confirmados en Barranquilla: ",df_agrupado2_Barr["Confirmados_acum"].iloc[-1])
print("Número total de casos recuperados en Barranquilla: ",df_agrupado2_Barr["Recuperados_acum"].iloc[-1])
print("Número total de muertes en Barranquilla: ",df_agrupado2_Barr["Muertos_acum"].iloc[-1])
print("Número total de casos Activos en Barranquilla: ",df_agrupado2_Barr["Activos_acum"].iloc[-1])
print("Número aproximado de casos confirmados por día: ",np.round(df_agrupado2_Barr["Confirmados_acum"].iloc[-1]/df_agrupado2_Barr.shape[0]))
print("Número aproximado de casos recuperados por día: ",np.round(df_agrupado2_Barr["Recuperados_acum"].iloc[-1]/df_agrupado2_Barr.shape[0]))
print("Número aproximado de muertes por día: ",np.round(df_agrupado2_Barr["Muertos_acum"].iloc[-1]/df_agrupado2_Barr.shape[0]))
print("Nuevos casos confirmados: ",df_agrupado2_Barr["Confirmados_acum"].iloc[-1]-df_agrupado2_Barr["Confirmados_acum"].iloc[-2])
"""
##Se grafica el comportamiento del crecimiento semanal por tipo de casos

df_agrupado2_Barr["Semana"]=df_agrupado2_Barr.index.weekofyear

semana_num=[]
semana_confirmados=[]
semana_recuperados=[]
semana_muertos=[]
w=1
for i in list(df_agrupado2_Barr["Semana"].unique()):
    semana_confirmados.append(df_agrupado2_Barr[df_agrupado2_Barr["Semana"]==i]["Confirmados_acum"].iloc[-1])
    semana_recuperados.append(df_agrupado2_Barr[df_agrupado2_Barr["Semana"]==i]["Recuperados_acum"].iloc[-1])
    semana_muertos.append(df_agrupado2_Barr[df_agrupado2_Barr["Semana"]==i]["Muertos_acum"].iloc[-1])
    semana_num.append(w)
    w=w+1

crecimiento=go.Figure()
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_confirmados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos confirmados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_recuperados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos recuperados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_muertos,
                    mode='lines+markers',
                    name='Crecimiento semanal muertos'))
crecimiento.update_layout(title="Crecimiento semanal por tipo de casos en Barranquilla",
                 xaxis_title="Semana",yaxis_title="Número de casos",legend=dict(x=0,y=1,traceorder="normal"))
crecimiento.write_image("images/barr_crecimiento.png")

##Se calcula las tasas de mortalidad y recuperación

df_agrupado2_Barr["Tasa de mortalidad"]=(df_agrupado2_Barr["Muertos_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100
df_agrupado2_Barr["Tasa de recuperación"]=(df_agrupado2_Barr["Recuperados_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100

#print("Tasa de mortalidad promedio",df_agrupado2_Barr["Tasa de mortalidad"].mean())
#print("Tasa de recuperación promedio",df_agrupado2_Barr["Tasa de recuperación"].mean())

##Se grafica el comportamiento de las tasas

Tasas = make_subplots(rows=2, cols=1,
                   subplot_titles=("Tasa de recuperación", "Tasa de mortalidad"))
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Barr.index, y=(df_agrupado2_Barr["Recuperados_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100,name="Tasa de recuperación"),
    row=1, col=1
)
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Barr.index, y=(df_agrupado2_Barr["Muertos_acum"]/df_agrupado2_Barr["Confirmados_acum"])*100,name="Tasa de mortalidad"),
    row=2, col=1
)
Tasas.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
Tasas.update_xaxes(title_text="Fecha", row=1, col=1)
Tasas.update_yaxes(title_text="tasa de recuperación", row=1, col=1)
Tasas.update_xaxes(title_text="Fecha", row=1, col=2)
Tasas.update_yaxes(title_text="Tasa de mortalidad", row=1, col=2)
#Tasas.show()

##Se grafica el factor de crecimiento de los tipos de casos
Factor_Crecimiento=go.Figure()
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Barr.index, y=df_agrupado2_Barr["Confirmados"]/df_agrupado2_Barr["Confirmados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos confirmados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Barr.index, y=df_agrupado2_Barr["Recuperados"]/df_agrupado2_Barr["Recuperados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos recuperados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Barr.index, y=df_agrupado2_Barr["Muertos"]/df_agrupado2_Barr["Muertos"].shift(),
                    mode='lines',
                    name='Factor de crecimiento muertes'))
Factor_Crecimiento.update_layout(title="Factor de crecimiento casos confirmados, recuperados y muertes",
                 xaxis_title="Fecha",yaxis_title="Factor de crecimiento",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
Factor_Crecimiento.write_image("images/barr_factor_crecimiento.png")

"""#Modelo de predicción AR para Barranquilla

##Casos confirmados
"""

##Entrenamiento 
model_train_Barr_Con=df_agrupado2_Barr.iloc[:int(df_agrupado2_Barr.shape[0]*0.95)]
valid_Barr_Con=df_agrupado2_Barr.iloc[int(df_agrupado2_Barr.shape[0]*0.95):]
y_pred_Barr_Con=valid_Barr_Con.copy()

##Selección del modelo
model_ar_Barr_Con= auto_arima(model_train_Barr_Con["Confirmados_acum"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=5,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Barr_Con.fit(model_train_Barr_Con["Confirmados_acum"])

##Calculo predicción
prediction_ar_Barr_Con=model_ar_Barr_Con.predict(len(valid_Barr_Con))
y_pred_Barr_Con["AR Predicción"]=prediction_ar_Barr_Con

##Métrica RMSE
model_scores_Barr_Conf=[]
model_scores_Barr_Conf.append(np.sqrt(mean_squared_error(y_pred_Barr_Con["Confirmados_acum"],y_pred_Barr_Con["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Barr_Con["Confirmados_acum"],y_pred_Barr_Con["AR Predicción"])))

##Graficando el modelo para los confirmados
Confirmados_Barr=go.Figure()
Confirmados_Barr.add_trace(go.Scatter(x=model_train_Barr_Con.index, y=model_train_Barr_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de entrenamiento para casos confirmados"))
Confirmados_Barr.add_trace(go.Scatter(x=valid_Barr_Con.index, y=valid_Barr_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de Validación para casos confirmados",))
Confirmados_Barr.add_trace(go.Scatter(x=valid_Barr_Con.index, y=y_pred_Barr_Con["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos confirmados",))
Confirmados_Barr.update_layout(title="Predicción casos confirmados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  confirmados",legend=dict(x=0,y=1,traceorder="normal"))
Confirmados_Barr.write_image("images/barr_confirmados.png")

#Crea datos de predicción a 30 días
nuevo_dia=[]
Prediccion_AR_Barr_Con=[]
for i in range(1,30):
    nuevo_dia.append(df_agrupado2_Barr.index[-1]+timedelta(days=i))
    Prediccion_AR_Barr_Con.append(model_ar_Barr_Con.predict(len(valid_Barr_Con)+i)[-1])

"""##Casos recuperados"""

##Se debe considerar que se observan retrasos en el reporte de casos al mostrar de forma consecutiva 0 recuperados y 0 muertes, teniendo en cuenta que aún hay casos activos en la región y que los casos no permanecen activos indefinidamente 
##Entrenamiento
model_train_Barr_recu=df_agrupado2_Barr.iloc[:int(df_agrupado2_Barr.shape[0]*0.95)]
valid_Barr_recu=df_agrupado2_Barr.iloc[int(df_agrupado2_Barr.shape[0]*0.95):]
y_pred_Barr_recu=valid_Barr_recu.copy()

##Selección
model_ar_Barr_recu= auto_arima(model_train_Barr_recu["Recuperados"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=7,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Barr_recu.fit(model_train_Barr_recu["Recuperados"])

##Predicción
prediction_ar_Barr_recu=model_ar_Barr_recu.predict(len(valid_Barr_recu))
y_pred_Barr_recu["AR Predicción"]=prediction_ar_Barr_recu

#Métrica RMSE
model_scores_Barr_recu=[]
model_scores_Barr_recu.append(np.sqrt(mean_squared_error(y_pred_Barr_recu["Recuperados"],y_pred_Barr_recu["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Barr_recu["Recuperados"],y_pred_Barr_recu["AR Predicción"])))

##Graficando el modelo para los recuperados
Recuperados_Barr=go.Figure()
Recuperados_Barr.add_trace(go.Scatter(x=model_train_Barr_recu.index, y=model_train_Barr_recu["Recuperados"],
                    mode='lines+markers',name="Datos de entrenamiento para casos recuperados"))
Recuperados_Barr.add_trace(go.Scatter(x=valid_Barr_recu.index, y=valid_Barr_recu["Recuperados"],
                    mode='lines+markers',name="Datos de Validación para casos recuperados",))
Recuperados_Barr.add_trace(go.Scatter(x=valid_Barr_recu.index, y=y_pred_Barr_recu["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos recuperados",))
Recuperados_Barr.update_layout(title="Predicción casos recuperados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  recuperados",legend=dict(x=0,y=1,traceorder="normal"))
Recuperados_Barr.write_image("images/barr_recuperados.png")

#Crea datos de predicción a 30 días
Prediccion_AR_Barr_recu=[]
for i in range(1,30):
    Prediccion_AR_Barr_recu.append(model_ar_Barr_recu.predict(len(valid_Barr_recu)+i)[-1])

"""##Muertes"""

##Entrenamiento
model_train_Barr_M=df_agrupado2_Barr.iloc[:int(df_agrupado2_Barr.shape[0]*0.90)]
valid_Barr_M=df_agrupado2_Barr.iloc[int(df_agrupado2_Barr.shape[0]*0.90):]
y_pred_Barr_M=valid_Barr_M.copy()

##Selección
model_sarima_Barr_M= auto_arima(model_train_Barr_M["Muertos"],trace=True, error_action='ignore', 
                         start_p=0,start_q=0,max_p=2,max_q=2,m=9,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima_Barr_M.fit(model_train_Barr_M["Muertos"])

#Predicción
prediction_sarima_Barr_M=model_sarima_Barr_M.predict(len(valid_Barr_M))
y_pred_Barr_M["SARIMA Model Prediction"]=prediction_sarima_Barr_M

#Métricas RMSE
model_scores_Barr_M=[]
model_scores_Barr_M.append(np.sqrt(mean_squared_error(y_pred_Barr_M["Muertos"],y_pred_Barr_M["SARIMA Model Prediction"])))
#print("RMSE para modelo SARIMA: ",np.sqrt(mean_squared_error(y_pred_Barr_M["Muertos"],y_pred_Barr_M["SARIMA Model Prediction"])))

#Gráfica SARIMA Muertes
Muertes_Barr=go.Figure()
Muertes_Barr.add_trace(go.Scatter(x=model_train_Barr_M.index, y=model_train_Barr_M["Muertos"],
                    mode='lines+markers',name="Datos de entrenamiento para muertes"))
Muertes_Barr.add_trace(go.Scatter(x=valid_Barr_M.index, y=valid_Barr_M["Muertos"],
                    mode='lines+markers',name="Datos de validación para muertes",))
Muertes_Barr.add_trace(go.Scatter(x=valid_Barr_M.index, y=y_pred_Barr_M["SARIMA Model Prediction"],
                    mode='lines+markers',name="Predicción para muertes",))
Muertes_Barr.update_layout(title="Predicción muertes modelo SARIMA",
                 xaxis_title="Fecha",yaxis_title="Muertes",legend=dict(x=0,y=1,traceorder="normal"))
Muertes_Barr.write_image("images/barr_muertes.png")

#Se crean datos de predicción a 30 días
Prediccion_SARIMA_Barr_M=[]
for i in range(1,30):
    Prediccion_SARIMA_Barr_M.append(model_sarima_Barr_M.predict(len(valid_Barr_M)+i)[-1])

"""#Resumen general predicción casos confirmados, nuevos, activos, recuperados y muertes Barranquilla"""

##Se tiene en cuenta que dada la reapertura se tiene una expectativa de crecimiento de los nuevos casospor lo cual se consideran los modelos evaluados pensando en ese escenario

#pd.set_option('display.float_format', lambda x: '%.6f' % x)
#Predicciones_Barr=pd.DataFrame(zip(nuevo_dia,Prediccion_AR_Barr_Con,Prediccion_AR_Barr_recu,Prediccion_SARIMA_Barr_M ), columns=["Fechas","Modelo AR Confirmados","Modelo AR Recuperados", "Modelo SARIMA Muertes"])
#Predicciones_Barr.head()

pd.set_option('display.float_format', lambda x: '%.6f' % x)

Predicciones_Barr=zip(nuevo_dia,Prediccion_AR_Barr_Con,Prediccion_AR_Barr_recu,Prediccion_SARIMA_Barr_M)

Predicciones_Barr = pd.DataFrame(list(Predicciones_Barr), columns=["Fechas","Modelo AR Confirmados","Modelo AR Recuperados", "Modelo SARIMA Muertes"])

#Predicciones_Barr.head()

##Predicciones 1ra semana
Predicciones_Barr["Activos"]= Predicciones_Barr["Modelo AR Confirmados"]-Predicciones_Barr["Modelo AR Recuperados"]-Predicciones_Barr["Modelo SARIMA Muertes"]
Predicciones_Barr["Nuevos"]= Predicciones_Barr["Modelo AR Confirmados"].diff()

#Predicciones_Barr.head(7)

##Predicciones cuarta semana
#Predicciones_Barr.tail(7)

"""##Intervalos de confianza"""

Int_Conf = sms.DescrStatsW(y_pred_Barr_Con["AR Predicción"]).tconfint_mean()
Int_Recu = sms.DescrStatsW(y_pred_Barr_recu["AR Predicción"]).tconfint_mean()
Int_Muertos = sms.DescrStatsW(y_pred_Barr_M["SARIMA Model Prediction"]).tconfint_mean()

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Intervalos_Barr=zip(Int_Conf,Int_Recu,Int_Muertos)
Intervalos_Barr=pd.DataFrame(list(Intervalos_Barr), columns=["Int_Confirmados","Int_Recuperados", "Int_Muertes"])
#Intervalos_Barr

"""##Métricas"""

Error_Barr=zip(model_scores_Barr_Conf,model_scores_Barr_recu,model_scores_Barr_M)
Error_Barr=pd.DataFrame(list(Error_Barr), columns=["RMSE_Confirmados","RMSE_Recuperados", "RMSE_Muertes"])
#Error_Barr

"""#Ciudad de Bogotá"""

##Se filtran los datos para la ciudad de Bogotá
df_agrupado_Bog = new_df[new_df['Ciudad_de_ubicación'] == 'Bogotá D.C.']
#df_agrupado_Bog.head()

df_agrupado2_Bog= df_agrupado_Bog.groupby(["Fecha_diagnostico"]).agg({"Confirmados":'sum',"Recuperados":'sum',"Activos":'sum',"Muertos":'sum'})
#df_agrupado2_Bog.head()

##Se crean las columnas con la frecuencia acumulada por tipo de casos

df_agrupado2_Bog["Confirmados_acum"] =df_agrupado2_Bog["Confirmados"].cumsum()
df_agrupado2_Bog["Recuperados_acum"] =df_agrupado2_Bog["Recuperados"].cumsum()
df_agrupado2_Bog["Activos_acum"] =df_agrupado2_Bog["Activos"].cumsum()
df_agrupado2_Bog["Muertos_acum"] =df_agrupado2_Bog["Muertos"].cumsum()
#df_agrupado2_Bog.head()

df_agrupado2_Bog["Días"]=df_agrupado2_Bog.index-df_agrupado2_Bog.index.min()
df_agrupado2_Bog["Días"]=df_agrupado2_Bog["Días"].dt.days

#df_agrupado2_Bog.tail(10)

##Se eliminan los últimos 4 días debido a que se observan retrasos en la información de recuperados y muertes
df_agrupado2_Bog = df_agrupado2_Bog[:-4]

#df_agrupado2_Bog.tail(10)

"""#Resumen inicial estado actual Bogotá"""

##Se presenta un resumen general acumulado del estado actual de casos
"""
print("Informacion General Bogotá ")
print("Número total de casos confirmados en Bogotá: ",df_agrupado2_Bog["Confirmados_acum"].iloc[-1])
print("Número total de casos recuperados en Bogotá: ",df_agrupado2_Bog["Recuperados_acum"].iloc[-1])
print("Número total de muertes en Bogotá: ",df_agrupado2_Bog["Muertos_acum"].iloc[-1])
print("Número total de casos Activos en Bogotá: ",df_agrupado2_Bog["Activos_acum"].iloc[-1])
print("Número aproximado de casos confirmados por día: ",np.round(df_agrupado2_Bog["Confirmados_acum"].iloc[-1]/df_agrupado2_Bog.shape[0]))
print("Número aproximado de casos recuperados por día: ",np.round(df_agrupado2_Bog["Recuperados_acum"].iloc[-1]/df_agrupado2_Bog.shape[0]))
print("Número aproximado de muertes por día: ",np.round(df_agrupado2_Bog["Muertos_acum"].iloc[-1]/df_agrupado2_Bog.shape[0]))
print("Nuevos casos confirmados: ",df_agrupado2_Bog["Confirmados_acum"].iloc[-1]-df_agrupado2_Bog["Confirmados_acum"].iloc[-2])
"""
##Se grafica el comportamiento del crecimiento semanal por tipo de casos

df_agrupado2_Bog["Semana"]=df_agrupado2_Bog.index.weekofyear

semana_num=[]
semana_confirmados=[]
semana_recuperados=[]
semana_muertos=[]
w=1
for i in list(df_agrupado2_Bog["Semana"].unique()):
    semana_confirmados.append(df_agrupado2_Bog[df_agrupado2_Bog["Semana"]==i]["Confirmados_acum"].iloc[-1])
    semana_recuperados.append(df_agrupado2_Bog[df_agrupado2_Bog["Semana"]==i]["Recuperados_acum"].iloc[-1])
    semana_muertos.append(df_agrupado2_Bog[df_agrupado2_Bog["Semana"]==i]["Muertos_acum"].iloc[-1])
    semana_num.append(w)
    w=w+1

crecimiento=go.Figure()
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_confirmados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos confirmados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_recuperados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos recuperados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_muertos,
                    mode='lines+markers',
                    name='Crecimiento semanal muertos'))
crecimiento.update_layout(title="Crecimiento semanal por tipo de casos en Bogotá",
                 xaxis_title="Semana",yaxis_title="Número de casos",legend=dict(x=0,y=1,traceorder="normal"))
crecimiento.write_image("images/bog_crecimiento.png")

##Se calcula las tasas de mortalidad y recuperación
df_agrupado2_Bog["Tasa de mortalidad"]=(df_agrupado2_Bog["Muertos_acum"]/df_agrupado2_Bog["Confirmados_acum"])*100
df_agrupado2_Bog["Tasa de recuperación"]=(df_agrupado2_Bog["Recuperados_acum"]/df_agrupado2_Bog["Confirmados_acum"])*100
#print("Tasa de mortalidad promedio",df_agrupado2_Bog["Tasa de mortalidad"].mean())
#print("Tasa de recuperación promedio",df_agrupado2_Bog["Tasa de recuperación"].mean())

##Se grafica el comportamiento de las tasas
Tasas = make_subplots(rows=2, cols=1,
                   subplot_titles=("Tasa de recuperación", "Tasa de mortalidad"))
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Bog.index, y=(df_agrupado2_Bog["Recuperados_acum"]/df_agrupado2_Bog["Confirmados_acum"])*100,name="Tasa de recuperación"),
    row=1, col=1
)
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Bog.index, y=(df_agrupado2_Bog["Muertos_acum"]/df_agrupado2_Bog["Confirmados_acum"])*100,name="Tasa de mortalidad"),
    row=2, col=1
)
Tasas.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
Tasas.update_xaxes(title_text="Fecha", row=1, col=1)
Tasas.update_yaxes(title_text="tasa de recuperación", row=1, col=1)
Tasas.update_xaxes(title_text="Fecha", row=1, col=2)
Tasas.update_yaxes(title_text="Tasa de mortalidad", row=1, col=2)
#Tasas.show()

##Se grafica el factor de crecimiento de los tipos de casos
Factor_Crecimiento=go.Figure()
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Bog.index, y=df_agrupado2_Bog["Confirmados"]/df_agrupado2_Bog["Confirmados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos confirmados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Bog.index, y=df_agrupado2_Bog["Recuperados"]/df_agrupado2_Bog["Recuperados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos recuperados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Bog.index, y=df_agrupado2_Bog["Muertos"]/df_agrupado2_Bog["Muertos"].shift(),
                    mode='lines',
                    name='Factor de crecimiento muertes'))
Factor_Crecimiento.update_layout(title="Factor de crecimiento casos confirmados, recuperados y muertes",
                 xaxis_title="Fecha",yaxis_title="Factor de crecimiento",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
Factor_Crecimiento.write_image("images/bog_factor_crecimiento.png")

"""#Modelo de predicción AR para Bogotá

##Casos confirmados
"""

##Entrenamiento 
model_train_Bog_Con=df_agrupado2_Bog.iloc[:int(df_agrupado2_Bog.shape[0]*0.95)]
valid_Bog_Con=df_agrupado2_Bog.iloc[int(df_agrupado2_Bog.shape[0]*0.95):]
y_pred_Bog_Con=valid_Bog_Con.copy()

##Selección del modelo
model_ar_Bog_Con= auto_arima(model_train_Bog_Con["Confirmados_acum"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=3,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Bog_Con.fit(model_train_Bog_Con["Confirmados_acum"])

##Calculo predicción
prediction_ar_Bog_Con=model_ar_Bog_Con.predict(len(valid_Bog_Con))
y_pred_Bog_Con["AR Predicción"]=prediction_ar_Bog_Con

##Métrica RMSE
model_scores_Bog_Conf=[]
model_scores_Bog_Conf.append(np.sqrt(mean_squared_error(y_pred_Bog_Con["Confirmados_acum"],y_pred_Bog_Con["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Bog_Con["Confirmados_acum"],y_pred_Bog_Con["AR Predicción"])))

##Graficando el modelo para los confirmados
Confirmados_Bog=go.Figure()
Confirmados_Bog.add_trace(go.Scatter(x=model_train_Bog_Con.index, y=model_train_Bog_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de entrenamiento para casos confirmados"))
Confirmados_Bog.add_trace(go.Scatter(x=valid_Bog_Con.index, y=valid_Bog_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de Validación para casos confirmados",))
Confirmados_Bog.add_trace(go.Scatter(x=valid_Bog_Con.index, y=y_pred_Bog_Con["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos confirmados",))
Confirmados_Bog.update_layout(title="Predicción casos confirmados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  confirmados",legend=dict(x=0,y=1,traceorder="normal"))
Confirmados_Bog.write_image("images/bog_confirmados.png")

#Crea datos de predicción a 30 días
nuevo_dia=[]
Prediccion_AR_Bog_Con=[]
for i in range(1,30):
    nuevo_dia.append(df_agrupado2_Bog.index[-1]+timedelta(days=i))
    Prediccion_AR_Bog_Con.append(model_ar_Bog_Con.predict(len(valid_Bog_Con)+i)[-1])

"""##Casos recuperados"""

##Se debe considerar que se observan retrasos en el reporte de casos al mostrar de forma consecutiva 0 recuperados y 0 muertes, teniendo en cuenta que aún hay casos activos en la región y que los casos no permanecen activos indefinidamente 
##Entrenamiento
model_train_Bog_recu=df_agrupado2_Bog.iloc[:int(df_agrupado2_Bog.shape[0]*0.85)]
valid_Bog_recu=df_agrupado2_Bog.iloc[int(df_agrupado2_Bog.shape[0]*0.85):]
y_pred_Bog_recu=valid_Bog_recu.copy()

##Selección
model_ar_Bog_recu= auto_arima(model_train_Bog_recu["Recuperados"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=3,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Bog_recu.fit(model_train_Bog_recu["Recuperados"])

##Predicción
prediction_ar_Bog_recu=model_ar_Bog_recu.predict(len(valid_Bog_recu))
y_pred_Bog_recu["AR Predicción"]=prediction_ar_Bog_recu

#Métrica RMSE
model_scores_Bog_recu=[]
model_scores_Bog_recu.append(np.sqrt(mean_squared_error(y_pred_Bog_recu["Recuperados"],y_pred_Bog_recu["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Bog_recu["Recuperados"],y_pred_Bog_recu["AR Predicción"])))

##Graficando el modelo para los recuperados
Recuperados_Bog=go.Figure()
Recuperados_Bog.add_trace(go.Scatter(x=model_train_Bog_recu.index, y=model_train_Bog_recu["Recuperados"],
                    mode='lines+markers',name="Datos de entrenamiento para casos recuperados"))
Recuperados_Bog.add_trace(go.Scatter(x=valid_Bog_recu.index, y=valid_Bog_recu["Recuperados"],
                    mode='lines+markers',name="Datos de Validación para casos recuperados",))
Recuperados_Bog.add_trace(go.Scatter(x=valid_Bog_recu.index, y=y_pred_Bog_recu["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos recuperados",))
Recuperados_Bog.update_layout(title="Predicción casos recuperados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  recuperados",legend=dict(x=0,y=1,traceorder="normal"))
Recuperados_Bog.write_image("images/bog_recuperados.png")

#Crea datos de predicción a 30 días
Prediccion_AR_Bog_recu=[]
for i in range(1,30):
    Prediccion_AR_Bog_recu.append(model_ar_Bog_recu.predict(len(valid_Bog_recu)+i)[-1])

"""##Muertes"""

##Entrenamiento
model_train_Bog_M=df_agrupado2_Bog.iloc[:int(df_agrupado2_Bog.shape[0]*0.90)]
valid_Bog_M=df_agrupado2_Bog.iloc[int(df_agrupado2_Bog.shape[0]*0.90):]
y_pred_Bog_M=valid_Bog_M.copy()

##Selección
model_sarima_Bog_M= auto_arima(model_train_Bog_M["Muertos"],trace=True, error_action='ignore', 
                         start_p=0,start_q=0,max_p=2,max_q=2,m=9,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima_Bog_M.fit(model_train_Bog_M["Muertos"])

#Predicción
prediction_sarima_Bog_M=model_sarima_Bog_M.predict(len(valid_Bog_M))
y_pred_Bog_M["SARIMA Model Prediction"]=prediction_sarima_Bog_M

#Métricas RMSE
model_scores_Bog_M=[]
model_scores_Bog_M.append(np.sqrt(mean_squared_error(y_pred_Bog_M["Muertos"],y_pred_Bog_M["SARIMA Model Prediction"])))
#print("RMSE para modelo SARIMA: ",np.sqrt(mean_squared_error(y_pred_Bog_M["Muertos"],y_pred_Bog_M["SARIMA Model Prediction"])))

#Gráfica SARIMA Muertes
Muertes_Bog=go.Figure()
Muertes_Bog.add_trace(go.Scatter(x=model_train_Bog_M.index, y=model_train_Bog_M["Muertos"],
                    mode='lines+markers',name="Datos de entrenamiento para muertes"))
Muertes_Bog.add_trace(go.Scatter(x=valid_Bog_M.index, y=valid_Bog_M["Muertos"],
                    mode='lines+markers',name="Datos de validación para muertes",))
Muertes_Bog.add_trace(go.Scatter(x=valid_Bog_M.index, y=y_pred_Bog_M["SARIMA Model Prediction"],
                    mode='lines+markers',name="Predicción para muertes",))
Muertes_Bog.update_layout(title="Predicción muertes modelo SARIMA",
                 xaxis_title="Fecha",yaxis_title="Muertes",legend=dict(x=0,y=1,traceorder="normal"))
Muertes_Bog.write_image("images/bog_muertes.png")

#Se crean datos de predicción a 30 días
Prediccion_SARIMA_Bog_M=[]
for i in range(1,30):
    Prediccion_SARIMA_Bog_M.append(model_sarima_Bog_M.predict(len(valid_Bog_M)+i)[-1])

"""#Resumen general predicción casos confirmados, nuevos, activos, recuperados y muertes Bogotá"""

##Se tiene en cuenta que dada la reapertura se tiene una expectativa de crecimiento de los nuevos casospor lo cual se consideran los modelos evaluados pensando en ese escenario

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Predicciones_Bog=zip(nuevo_dia,Prediccion_AR_Bog_Con,Prediccion_AR_Bog_recu,Prediccion_SARIMA_Bog_M )
Predicciones_Bog=pd.DataFrame(list(Predicciones_Bog), columns=["Fechas","Modelo AR Confirmados","Modelo AR Recuperados", "Modelo SARIMA Muertes"])
#Predicciones_Bog.head()

##Predicciones 1ra semana
Predicciones_Bog["Activos"]= Predicciones_Bog["Modelo AR Confirmados"]-Predicciones_Bog["Modelo AR Recuperados"]-Predicciones_Bog["Modelo SARIMA Muertes"]
Predicciones_Bog["Nuevos"]= Predicciones_Bog["Modelo AR Confirmados"].diff()

#Predicciones_Bog.head(7)

##Predicciones cuarta semana
#Predicciones_Bog.tail(7)

"""##Intervalos de confianza"""

Int_Conf = sms.DescrStatsW(y_pred_Bog_Con["AR Predicción"]).tconfint_mean()
Int_Recu = sms.DescrStatsW(y_pred_Bog_recu["AR Predicción"]).tconfint_mean()
Int_Muertos = sms.DescrStatsW(y_pred_Bog_M["SARIMA Model Prediction"]).tconfint_mean()

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Intervalos_Bog=zip(Int_Conf,Int_Recu,Int_Muertos)
Intervalos_Bog=pd.DataFrame(list(Intervalos_Bog), columns=["Int_Confirmados","Int_Recuperados", "Int_Muertes"])
Intervalos_Bog

"""##Métricas"""

Error_Bog=zip(model_scores_Bog_Conf,model_scores_Bog_recu,model_scores_Bog_M)
Error_Bog=pd.DataFrame(list(Error_Bog), columns=["RMSE_Confirmados","RMSE_Recuperados", "RMSE_Muertes"])
#Error_Bog

"""#Ciudad de Medellín"""

##Se filtran los datos para la ciudad de Medellín
df_agrupado_Med = new_df[new_df['Ciudad_de_ubicación'] == 'Medellín']
#df_agrupado_Med.head()

df_agrupado2_Med= df_agrupado_Med.groupby(["Fecha_diagnostico"]).agg({"Confirmados":'sum',"Recuperados":'sum',"Activos":'sum',"Muertos":'sum'})
#df_agrupado2_Med.head()

##Se crean las columnas con la frecuencia acumulada por tipo de casos

df_agrupado2_Med["Confirmados_acum"] =df_agrupado2_Med["Confirmados"].cumsum()
df_agrupado2_Med["Recuperados_acum"] =df_agrupado2_Med["Recuperados"].cumsum()
df_agrupado2_Med["Activos_acum"] =df_agrupado2_Med["Activos"].cumsum()
df_agrupado2_Med["Muertos_acum"] =df_agrupado2_Med["Muertos"].cumsum()
#df_agrupado2_Med.head()

df_agrupado2_Med["Días"]=df_agrupado2_Med.index-df_agrupado2_Med.index.min()
df_agrupado2_Med["Días"]=df_agrupado2_Med["Días"].dt.days

#df_agrupado2_Med.tail(10)

##Se eliminan los últimos 4 días debido a que se observan retrasos en la información de recuperados y muertes
df_agrupado2_Med = df_agrupado2_Med[:-4]

#df_agrupado2_Med.tail(10)

"""#Resumen inicial estado actual Medellín"""

##Se presenta un resumen general acumulado del estado actual de casos
"""
print("Informacion General Medellín ")
print("Número total de casos confirmados en Medellín: ",df_agrupado2_Med["Confirmados_acum"].iloc[-1])
print("Número total de casos recuperados en Medellín: ",df_agrupado2_Med["Recuperados_acum"].iloc[-1])
print("Número total de muertes en Medellín: ",df_agrupado2_Med["Muertos_acum"].iloc[-1])
print("Número total de casos Activos en Medellín: ",df_agrupado2_Med["Activos_acum"].iloc[-1])
print("Número aproximado de casos confirmados por día: ",np.round(df_agrupado2_Med["Confirmados_acum"].iloc[-1]/df_agrupado2_Med.shape[0]))
print("Número aproximado de casos recuperados por día: ",np.round(df_agrupado2_Med["Recuperados_acum"].iloc[-1]/df_agrupado2_Med.shape[0]))
print("Número aproximado de muertes por día: ",np.round(df_agrupado2_Med["Muertos_acum"].iloc[-1]/df_agrupado2_Med.shape[0]))
print("Nuevos casos confirmados: ",df_agrupado2_Med["Confirmados_acum"].iloc[-1]-df_agrupado2_Med["Confirmados_acum"].iloc[-2])
"""
##Se grafica el comportamiento del crecimiento semanal por tipo de casos

df_agrupado2_Med["Semana"]=df_agrupado2_Med.index.weekofyear

semana_num=[]
semana_confirmados=[]
semana_recuperados=[]
semana_muertos=[]
w=1
for i in list(df_agrupado2_Med["Semana"].unique()):
    semana_confirmados.append(df_agrupado2_Med[df_agrupado2_Med["Semana"]==i]["Confirmados_acum"].iloc[-1])
    semana_recuperados.append(df_agrupado2_Med[df_agrupado2_Med["Semana"]==i]["Recuperados_acum"].iloc[-1])
    semana_muertos.append(df_agrupado2_Med[df_agrupado2_Med["Semana"]==i]["Muertos_acum"].iloc[-1])
    semana_num.append(w)
    w=w+1

crecimiento=go.Figure()
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_confirmados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos confirmados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_recuperados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos recuperados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_muertos,
                    mode='lines+markers',
                    name='Crecimiento semanal muertos'))
crecimiento.update_layout(title="Crecimiento semanal por tipo de casos en Medellín",
                 xaxis_title="Semana",yaxis_title="Número de casos",legend=dict(x=0,y=1,traceorder="normal"))
crecimiento.write_image("images/med_crecimiento.png")

##Se calcula las tasas de mortalidad y recuperación
df_agrupado2_Med["Tasa de mortalidad"]=(df_agrupado2_Med["Muertos_acum"]/df_agrupado2_Med["Confirmados_acum"])*100
df_agrupado2_Med["Tasa de recuperación"]=(df_agrupado2_Med["Recuperados_acum"]/df_agrupado2_Med["Confirmados_acum"])*100
#print("Tasa de mortalidad promedio",df_agrupado2_Med["Tasa de mortalidad"].mean())
#print("Tasa de recuperación promedio",df_agrupado2_Med["Tasa de recuperación"].mean())

##Se grafica el comportamiento de las tasas
Tasas = make_subplots(rows=2, cols=1,
                   subplot_titles=("Tasa de recuperación", "Tasa de mortalidad"))
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Med.index, y=(df_agrupado2_Med["Recuperados_acum"]/df_agrupado2_Med["Confirmados_acum"])*100,name="Tasa de recuperación"),
    row=1, col=1
)
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Med.index, y=(df_agrupado2_Med["Muertos_acum"]/df_agrupado2_Med["Confirmados_acum"])*100,name="Tasa de mortalidad"),
    row=2, col=1
)
Tasas.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
Tasas.update_xaxes(title_text="Fecha", row=1, col=1)
Tasas.update_yaxes(title_text="tasa de recuperación", row=1, col=1)
Tasas.update_xaxes(title_text="Fecha", row=1, col=2)
Tasas.update_yaxes(title_text="Tasa de mortalidad", row=1, col=2)
#Tasas.show()

##Se grafica el factor de crecimiento de los tipos de casos
Factor_Crecimiento=go.Figure()
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Med.index, y=df_agrupado2_Med["Confirmados"]/df_agrupado2_Med["Confirmados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos confirmados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Med.index, y=df_agrupado2_Med["Recuperados"]/df_agrupado2_Med["Recuperados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos recuperados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Med.index, y=df_agrupado2_Med["Muertos"]/df_agrupado2_Med["Muertos"].shift(),
                    mode='lines',
                    name='Factor de crecimiento muertes'))
Factor_Crecimiento.update_layout(title="Factor de crecimiento casos confirmados, recuperados y muertes",
                 xaxis_title="Fecha",yaxis_title="Factor de crecimiento",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
Factor_Crecimiento.write_image("images/med_factor_crecimiento.png")

"""#Modelo de predicción AR para Medellín

##Casos confirmados
"""

##Entrenamiento 
model_train_Med_Con=df_agrupado2_Med.iloc[:int(df_agrupado2_Med.shape[0]*0.95)]
valid_Med_Con=df_agrupado2_Med.iloc[int(df_agrupado2_Med.shape[0]*0.95):]
y_pred_Med_Con=valid_Med_Con.copy()

##Selección del modelo
model_ar_Med_Con= auto_arima(model_train_Med_Con["Confirmados_acum"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=5,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Med_Con.fit(model_train_Med_Con["Confirmados_acum"])

##Calculo predicción
prediction_ar_Med_Con=model_ar_Med_Con.predict(len(valid_Med_Con))
y_pred_Med_Con["AR Predicción"]=prediction_ar_Med_Con

##Métrica RMSE
model_scores_Med_Conf=[]
model_scores_Med_Conf.append(np.sqrt(mean_squared_error(y_pred_Med_Con["Confirmados_acum"],y_pred_Med_Con["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Med_Con["Confirmados_acum"],y_pred_Med_Con["AR Predicción"])))

##Graficando el modelo para los confirmados
Confirmados_Med=go.Figure()
Confirmados_Med.add_trace(go.Scatter(x=model_train_Med_Con.index, y=model_train_Med_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de entrenamiento para casos confirmados"))
Confirmados_Med.add_trace(go.Scatter(x=valid_Med_Con.index, y=valid_Med_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de Validación para casos confirmados",))
Confirmados_Med.add_trace(go.Scatter(x=valid_Med_Con.index, y=y_pred_Med_Con["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos confirmados",))
Confirmados_Med.update_layout(title="Predicción casos confirmados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  confirmados",legend=dict(x=0,y=1,traceorder="normal"))
Confirmados_Med.write_image("images/med_confirmados.png")

#Crea datos de predicción a 30 días
nuevo_dia=[]
Prediccion_AR_Med_Con=[]
for i in range(1,30):
    nuevo_dia.append(df_agrupado2_Med.index[-1]+timedelta(days=i))
    Prediccion_AR_Med_Con.append(model_ar_Med_Con.predict(len(valid_Med_Con)+i)[-1])

"""##Casos recuperados"""

##Se debe considerar que se observan retrasos en el reporte de casos al mostrar de forma consecutiva 0 recuperados y 0 muertes, teniendo en cuenta que aún hay casos activos en la región y que los casos no permanecen activos indefinidamente 
##Entrenamiento
model_train_Med_recu=df_agrupado2_Med.iloc[:int(df_agrupado2_Med.shape[0]*0.95)]
valid_Med_recu=df_agrupado2_Med.iloc[int(df_agrupado2_Med.shape[0]*0.95):]
y_pred_Med_recu=valid_Med_recu.copy()

##Selección
model_ar_Med_recu= auto_arima(model_train_Med_recu["Recuperados"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=10,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Med_recu.fit(model_train_Med_recu["Recuperados"])

##Predicción
prediction_ar_Med_recu=model_ar_Med_recu.predict(len(valid_Med_recu))
y_pred_Med_recu["AR Predicción"]=prediction_ar_Med_recu

#Métrica RMSE
model_scores_Med_recu=[]
model_scores_Med_recu.append(np.sqrt(mean_squared_error(y_pred_Med_recu["Recuperados"],y_pred_Med_recu["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Med_recu["Recuperados"],y_pred_Med_recu["AR Predicción"])))

##Graficando el modelo para los recuperados
Recuperados_Med=go.Figure()
Recuperados_Med.add_trace(go.Scatter(x=model_train_Med_recu.index, y=model_train_Med_recu["Recuperados"],
                    mode='lines+markers',name="Datos de entrenamiento para casos recuperados"))
Recuperados_Med.add_trace(go.Scatter(x=valid_Med_recu.index, y=valid_Med_recu["Recuperados"],
                    mode='lines+markers',name="Datos de Validación para casos recuperados",))
Recuperados_Med.add_trace(go.Scatter(x=valid_Med_recu.index, y=y_pred_Med_recu["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos recuperados",))
Recuperados_Med.update_layout(title="Predicción casos recuperados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  recuperados",legend=dict(x=0,y=1,traceorder="normal"))
Recuperados_Med.write_image("images/med_recuperados.png")

#Crea datos de predicción a 30 días
Prediccion_AR_Med_recu=[]
for i in range(1,30):
    Prediccion_AR_Med_recu.append(model_ar_Med_recu.predict(len(valid_Med_recu)+i)[-1])

"""##Muertes"""

##Entrenamiento
model_train_Med_M=df_agrupado2_Med.iloc[:int(df_agrupado2_Med.shape[0]*0.90)]
valid_Med_M=df_agrupado2_Med.iloc[int(df_agrupado2_Med.shape[0]*0.90):]
y_pred_Med_M=valid_Med_M.copy()

##Selección
model_sarima_Med_M= auto_arima(model_train_Med_M["Muertos"],trace=True, error_action='ignore', 
                         start_p=0,start_q=0,max_p=3,max_q=3,m=9,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima_Med_M.fit(model_train_Med_M["Muertos"])

#Predicción
prediction_sarima_Med_M=model_sarima_Med_M.predict(len(valid_Med_M))
y_pred_Med_M["SARIMA Model Prediction"]=prediction_sarima_Med_M

#Métricas RMSE
model_scores_Med_M=[]
model_scores_Med_M.append(np.sqrt(mean_squared_error(y_pred_Med_M["Muertos"],y_pred_Med_M["SARIMA Model Prediction"])))
#print("RMSE para modelo SARIMA: ",np.sqrt(mean_squared_error(y_pred_Med_M["Muertos"],y_pred_Med_M["SARIMA Model Prediction"])))

#Gráfica SARIMA Muertes
Muertes_Med=go.Figure()
Muertes_Med.add_trace(go.Scatter(x=model_train_Med_M.index, y=model_train_Med_M["Muertos"],
                    mode='lines+markers',name="Datos de entrenamiento para muertes"))
Muertes_Med.add_trace(go.Scatter(x=valid_Med_M.index, y=valid_Med_M["Muertos"],
                    mode='lines+markers',name="Datos de validación para muertes",))
Muertes_Med.add_trace(go.Scatter(x=valid_Med_M.index, y=y_pred_Med_M["SARIMA Model Prediction"],
                    mode='lines+markers',name="Predicción para muertes",))
Muertes_Med.update_layout(title="Predicción muertes modelo SARIMA",
                 xaxis_title="Fecha",yaxis_title="Muertes",legend=dict(x=0,y=1,traceorder="normal"))
Muertes_Med.write_image("images/med_muertes.png")

#Se crean datos de predicción a 30 días
Prediccion_SARIMA_Med_M=[]
for i in range(1,30):
    Prediccion_SARIMA_Med_M.append(model_sarima_Med_M.predict(len(valid_Med_M)+i)[-1])

"""#Resumen general predicción casos confirmados, nuevos, activos, recuperados y muertes Medellín"""

##Se tiene en cuenta que dada la reapertura se tiene una expectativa de crecimiento de los nuevos casospor lo cual se consideran los modelos evaluados pensando en ese escenario

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Predicciones_Med=zip(nuevo_dia,Prediccion_AR_Med_Con,Prediccion_AR_Med_recu,Prediccion_SARIMA_Med_M )
Predicciones_Med=pd.DataFrame(list(Predicciones_Med), columns=["Fechas","Modelo AR Confirmados","Modelo AR Recuperados", "Modelo SARIMA Muertes"])
#Predicciones_Med.head()

##Predicciones 1ra semana
Predicciones_Med["Activos"]= Predicciones_Med["Modelo AR Confirmados"]-Predicciones_Med["Modelo AR Recuperados"]-Predicciones_Med["Modelo SARIMA Muertes"]
Predicciones_Med["Nuevos"]= Predicciones_Med["Modelo AR Confirmados"].diff()

#Predicciones_Med.head(7)

##Predicciones cuarta semana
#Predicciones_Med.tail(7)

"""##Intervalos de confianza"""

Int_Conf = sms.DescrStatsW(y_pred_Med_Con["AR Predicción"]).tconfint_mean()
Int_Recu = sms.DescrStatsW(y_pred_Med_recu["AR Predicción"]).tconfint_mean()
Int_Muertos = sms.DescrStatsW(y_pred_Med_M["SARIMA Model Prediction"]).tconfint_mean()

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Intervalos_Med=zip(Int_Conf,Int_Recu,Int_Muertos)
Intervalos_Med=pd.DataFrame(list(Intervalos_Med), columns=["Int_Confirmados","Int_Recuperados", "Int_Muertes"])
#Intervalos_Med

"""##Métricas"""

Error_Med=zip(model_scores_Med_Conf,model_scores_Med_recu,model_scores_Med_M)
Error_Med=pd.DataFrame(list(Error_Med), columns=["RMSE_Confirmados","RMSE_Recuperados", "RMSE_Muertes"])
#Error_Med

"""# Filtrado Cali"""

##Se filtran los datos para la ciudad de Cali
df_agrupado_Cal = new_df[new_df['Ciudad_de_ubicación'] == 'Cali']
#df_agrupado_Cal.head()

df_agrupado2_Cal= df_agrupado_Cal.groupby(["Fecha_diagnostico"]).agg({"Confirmados":'sum',"Recuperados":'sum',"Activos":'sum',"Muertos":'sum'})
#df_agrupado2_Cal.head()

##Se crean las columnas con la frecuencia acumulada por tipo de casos

df_agrupado2_Cal["Confirmados_acum"] =df_agrupado2_Cal["Confirmados"].cumsum()
df_agrupado2_Cal["Recuperados_acum"] =df_agrupado2_Cal["Recuperados"].cumsum()
df_agrupado2_Cal["Activos_acum"] =df_agrupado2_Cal["Activos"].cumsum()
df_agrupado2_Cal["Muertos_acum"] =df_agrupado2_Cal["Muertos"].cumsum()
#df_agrupado2_Cal.head()

df_agrupado2_Cal["Días"]=df_agrupado2_Cal.index-df_agrupado2_Cal.index.min()
df_agrupado2_Cal["Días"]=df_agrupado2_Cal["Días"].dt.days

#df_agrupado2_Cal.tail(10)

##Se eliminan los últimos 4 días debido a que se observan retrasos en la información de recuperados y muertes
df_agrupado2_Cal = df_agrupado2_Cal[:-4]

#df_agrupado2_Cal.tail(10)

"""# Resumen inicial, estado actual Cali:"""

##Se presenta un resumen general acumulado del estado actual de casos
"""
print("Informacion General Cali ")
print("Nro total de casos confirmados en Cali: ",df_agrupado2_Cal["Confirmados_acum"].iloc[-1])
print("Nro total de casos recuperados en Cali: ",df_agrupado2_Cal["Recuperados_acum"].iloc[-1])
print("Nro total de muertes en Cali: ",df_agrupado2_Cal["Muertos_acum"].iloc[-1])
print("Nro total de casos Activos en Cali: ",df_agrupado2_Cal["Activos_acum"].iloc[-1])
print("Nro aproximado de casos confirmados por día: ",np.round(df_agrupado2_Cal["Confirmados_acum"].iloc[-1]/df_agrupado2_Cal.shape[0]))
print("Nro aproximado de casos recuperados por día: ",np.round(df_agrupado2_Cal["Recuperados_acum"].iloc[-1]/df_agrupado2_Cal.shape[0]))
print("Nro aproximado de muertes por día: ",np.round(df_agrupado2_Cal["Muertos_acum"].iloc[-1]/df_agrupado2_Cal.shape[0]))
print("Nuevos casos confirmados: ",df_agrupado2_Cal["Confirmados_acum"].iloc[-1]-df_agrupado2_Cal["Confirmados_acum"].iloc[-2])
"""
##Se grafica el comportamiento del crecimiento semanal por tipo de casos

df_agrupado2_Cal["Semana"]=df_agrupado2_Cal.index.weekofyear

semana_num=[]
semana_confirmados=[]
semana_recuperados=[]
semana_muertos=[]
w=1
for i in list(df_agrupado2_Cal["Semana"].unique()):
    semana_confirmados.append(df_agrupado2_Cal[df_agrupado2_Cal["Semana"]==i]["Confirmados_acum"].iloc[-1])
    semana_recuperados.append(df_agrupado2_Cal[df_agrupado2_Cal["Semana"]==i]["Recuperados_acum"].iloc[-1])
    semana_muertos.append(df_agrupado2_Cal[df_agrupado2_Cal["Semana"]==i]["Muertos_acum"].iloc[-1])
    semana_num.append(w)
    w=w+1

crecimiento=go.Figure()
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_confirmados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos confirmados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_recuperados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos recuperados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_muertos,
                    mode='lines+markers',
                    name='Crecimiento semanal muertos'))
crecimiento.update_layout(title="Crecimiento semanal por tipo de casos en Cali",
                 xaxis_title="Semana",yaxis_title="Número de casos",legend=dict(x=0,y=1,traceorder="normal"))
crecimiento.write_image("images/cal_crecimiento.png")

##Se calcula las tasas de mortalidad y recuperación
df_agrupado2_Cal["Tasa de mortalidad"]=(df_agrupado2_Cal["Muertos_acum"]/df_agrupado2_Cal["Confirmados_acum"])*100
df_agrupado2_Cal["Tasa de recuperación"]=(df_agrupado2_Cal["Recuperados_acum"]/df_agrupado2_Cal["Confirmados_acum"])*100
#print("Tasa de mortalidad promedio",df_agrupado2_Cal["Tasa de mortalidad"].mean())
#print("Tasa de recuperación promedio",df_agrupado2_Cal["Tasa de recuperación"].mean())

##Se grafica el comportamiento de las tasas
Tasas = make_subplots(rows=2, cols=1,
                   subplot_titles=("Tasa de recuperación", "Tasa de mortalidad"))
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Cal.index, y=(df_agrupado2_Cal["Recuperados_acum"]/df_agrupado2_Cal["Confirmados_acum"])*100,name="Tasa de recuperación"),
    row=1, col=1
)
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Cal.index, y=(df_agrupado2_Cal["Muertos_acum"]/df_agrupado2_Cal["Confirmados_acum"])*100,name="Tasa de mortalidad"),
    row=2, col=1
)
Tasas.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
Tasas.update_xaxes(title_text="Fecha", row=1, col=1)
Tasas.update_yaxes(title_text="tasa de recuperación", row=1, col=1)
Tasas.update_xaxes(title_text="Fecha", row=1, col=2)
Tasas.update_yaxes(title_text="Tasa de mortalidad", row=1, col=2)
#Tasas.show()

##Se grafica el factor de crecimiento de los tipos de casos
Factor_Crecimiento=go.Figure()
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Cal.index, y=df_agrupado2_Cal["Confirmados"]/df_agrupado2_Cal["Confirmados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos confirmados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Cal.index, y=df_agrupado2_Cal["Recuperados"]/df_agrupado2_Cal["Recuperados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos recuperados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Cal.index, y=df_agrupado2_Cal["Muertos"]/df_agrupado2_Cal["Muertos"].shift(),
                    mode='lines',
                    name='Factor de crecimiento muertes'))
Factor_Crecimiento.update_layout(title="Factor de crecimiento casos confirmados, recuperados y muertes",
                 xaxis_title="Fecha",yaxis_title="Factor de crecimiento",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
Factor_Crecimiento.write_image("images/cal_factor_crecimiento.png")

"""# Modelo de predicción AR para Cali

##Casos confirmados
"""

##Entrenamiento 
model_train_Cal_Con=df_agrupado2_Cal.iloc[:int(df_agrupado2_Cal.shape[0]*0.95)]
valid_Cal_Con=df_agrupado2_Cal.iloc[int(df_agrupado2_Cal.shape[0]*0.95):]
y_pred_Cal_Con=valid_Cal_Con.copy()

##Selección del modelo
model_ar_Cal_Con= auto_arima(model_train_Cal_Con["Confirmados_acum"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=7,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Cal_Con.fit(model_train_Cal_Con["Confirmados_acum"])

##Calculo predicción
prediction_ar_Cal_Con=model_ar_Cal_Con.predict(len(valid_Cal_Con))
y_pred_Cal_Con["AR Predicción"]=prediction_ar_Cal_Con

##Métrica RMSE
model_scores_Cal_Conf=[]
model_scores_Cal_Conf.append(np.sqrt(mean_squared_error(y_pred_Cal_Con["Confirmados_acum"],y_pred_Cal_Con["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Cal_Con["Confirmados_acum"],y_pred_Cal_Con["AR Predicción"])))

##Graficando el modelo para los confirmados
Confirmados_Cal=go.Figure()
Confirmados_Cal.add_trace(go.Scatter(x=model_train_Cal_Con.index, y=model_train_Cal_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de entrenamiento para casos confirmados"))
Confirmados_Cal.add_trace(go.Scatter(x=valid_Cal_Con.index, y=valid_Cal_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de Validación para casos confirmados",))
Confirmados_Cal.add_trace(go.Scatter(x=valid_Cal_Con.index, y=y_pred_Cal_Con["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos confirmados",))
Confirmados_Cal.update_layout(title="Predicción casos confirmados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  confirmados",legend=dict(x=0,y=1,traceorder="normal"))
Confirmados_Cal.write_image("images/cal_confirmados.png")

#Crea datos de predicción a 30 días
nuevo_dia=[]
Prediccion_AR_Cal_Con=[]
for i in range(1,30):
    nuevo_dia.append(df_agrupado2_Cal.index[-1]+timedelta(days=i))
    Prediccion_AR_Cal_Con.append(model_ar_Cal_Con.predict(len(valid_Cal_Con)+i)[-1])

"""# Casos recuperados"""

##Se debe considerar que se observan retrasos en el reporte de casos al mostrar de forma consecutiva 0 recuperados y 0 muertes, teniendo en cuenta que aún hay casos activos en la región y que los casos no permanecen activos indefinidamente 
##Entrenamiento
model_train_Cal_recu=df_agrupado2_Cal.iloc[:int(df_agrupado2_Cal.shape[0]*0.95)]
valid_Cal_recu=df_agrupado2_Cal.iloc[int(df_agrupado2_Cal.shape[0]*0.95):]
y_pred_Cal_recu=valid_Cal_recu.copy()

##Selección
model_ar_Cal_recu= auto_arima(model_train_Cal_recu["Recuperados"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=5,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Cal_recu.fit(model_train_Cal_recu["Recuperados"])

##Predicción
prediction_ar_Cal_recu=model_ar_Cal_recu.predict(len(valid_Cal_recu))
y_pred_Cal_recu["AR Predicción"]=prediction_ar_Cal_recu

#Métrica RMSE
model_scores_Cal_recu=[]
model_scores_Cal_recu.append(np.sqrt(mean_squared_error(y_pred_Cal_recu["Recuperados"],y_pred_Cal_recu["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Cal_recu["Recuperados"],y_pred_Cal_recu["AR Predicción"])))

##Graficando el modelo para los recuperados
Recuperados_Cal=go.Figure()
Recuperados_Cal.add_trace(go.Scatter(x=model_train_Cal_recu.index, y=model_train_Cal_recu["Recuperados"],
                    mode='lines+markers',name="Datos de entrenamiento para casos recuperados"))
Recuperados_Cal.add_trace(go.Scatter(x=valid_Cal_recu.index, y=valid_Cal_recu["Recuperados"],
                    mode='lines+markers',name="Datos de Validación para casos recuperados",))
Recuperados_Cal.add_trace(go.Scatter(x=valid_Cal_recu.index, y=y_pred_Cal_recu["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos recuperados",))
Recuperados_Cal.update_layout(title="Predicción casos recuperados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  recuperados",legend=dict(x=0,y=1,traceorder="normal"))
Recuperados_Cal.write_image("images/cal_recuperados.png")

#Crea datos de predicción a 30 días
Prediccion_AR_Cal_recu=[]
for i in range(1,30):
    Prediccion_AR_Cal_recu.append(model_ar_Cal_recu.predict(len(valid_Cal_recu)+i)[-1])

"""# Muertes"""

##Entrenamiento
model_train_Cal_M=df_agrupado2_Cal.iloc[:int(df_agrupado2_Cal.shape[0]*0.90)]
valid_Cal_M=df_agrupado2_Cal.iloc[int(df_agrupado2_Cal.shape[0]*0.90):]
y_pred_Cal_M=valid_Cal_M.copy()

##Selección
model_sarima_Cal_M= auto_arima(model_train_Cal_M["Muertos"],trace=True, error_action='ignore', 
                         start_p=0,start_q=0,max_p=2,max_q=2,m=7,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima_Cal_M.fit(model_train_Cal_M["Muertos"])

#Predicción
prediction_sarima_Cal_M=model_sarima_Cal_M.predict(len(valid_Cal_M))
y_pred_Cal_M["SARIMA Model Prediction"]=prediction_sarima_Cal_M

#Métricas RMSE
model_scores_Cal_M=[]
model_scores_Cal_M.append(np.sqrt(mean_squared_error(y_pred_Cal_M["Muertos"],y_pred_Cal_M["SARIMA Model Prediction"])))
#print("RMSE para modelo SARIMA: ",np.sqrt(mean_squared_error(y_pred_Cal_M["Muertos"],y_pred_Cal_M["SARIMA Model Prediction"])))

#Gráfica SARIMA Muertes
Muertes_Cal=go.Figure()
Muertes_Cal.add_trace(go.Scatter(x=model_train_Cal_M.index, y=model_train_Cal_M["Muertos"],
                    mode='lines+markers',name="Datos de entrenamiento para muertes"))
Muertes_Cal.add_trace(go.Scatter(x=valid_Cal_M.index, y=valid_Cal_M["Muertos"],
                    mode='lines+markers',name="Datos de validación para muertes",))
Muertes_Cal.add_trace(go.Scatter(x=valid_Cal_M.index, y=y_pred_Cal_M["SARIMA Model Prediction"],
                    mode='lines+markers',name="Predicción para muertes",))
Muertes_Cal.update_layout(title="Predicción muertes modelo SARIMA",
                 xaxis_title="Fecha",yaxis_title="Muertes",legend=dict(x=0,y=1,traceorder="normal"))
Muertes_Cal.write_image("images/cal_muertes.png")

#Se crean datos de predicción a 30 días
Prediccion_SARIMA_Cal_M=[]
for i in range(1,30):
    Prediccion_SARIMA_Cal_M.append(model_sarima_Cal_M.predict(len(valid_Cal_M)+i)[-1])

"""#Resumen general predicción casos confirmados, nuevos, activos, recuperados y muertes Cali"""

##Se tiene en cuenta que dada la reapertura se tiene una expectativa de crecimiento de los nuevos casospor lo cual se consideran los modelos evaluados pensando en ese escenario

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Predicciones_Cal=zip(nuevo_dia,Prediccion_AR_Cal_Con,Prediccion_AR_Cal_recu,Prediccion_SARIMA_Cal_M )
Predicciones_Cal=pd.DataFrame(list(Predicciones_Cal), columns=["Fechas","Modelo AR Confirmados","Modelo AR Recuperados", "Modelo SARIMA Muertes"])
#Predicciones_Cal.head()

##Predicciones 1ra semana
Predicciones_Cal["Activos"]= Predicciones_Cal["Modelo AR Confirmados"]-Predicciones_Cal["Modelo AR Recuperados"]-Predicciones_Cal["Modelo SARIMA Muertes"]
Predicciones_Cal["Nuevos"]= Predicciones_Cal["Modelo AR Confirmados"].diff()

#Predicciones_Cal.head(7)

##Predicciones cuarta semana
#Predicciones_Cal.tail(7)

"""#Intervalos de confianza"""

Int_Conf = sms.DescrStatsW(y_pred_Cal_Con["AR Predicción"]).tconfint_mean()
Int_Recu = sms.DescrStatsW(y_pred_Cal_recu["AR Predicción"]).tconfint_mean()
Int_Muertos = sms.DescrStatsW(y_pred_Cal_M["SARIMA Model Prediction"]).tconfint_mean()

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Intervalos_Cal=zip(Int_Conf,Int_Recu,Int_Muertos)
Intervalos_Cal=pd.DataFrame(list(Intervalos_Cal), columns=["Int_Confirmados","Int_Recuperados", "Int_Muertes"])
#Intervalos_Cal

"""##Métricas"""

Error_Cal=zip(model_scores_Cal_Conf,model_scores_Cal_recu,model_scores_Cal_M)
Error_Cal=pd.DataFrame(list(Error_Cal), columns=["RMSE_Confirmados","RMSE_Recuperados", "RMSE_Muertes"])
#Error_Cal

"""# Filtrado Cartagena"""

##Se filtran los datos para la ciudad de Cartagena de Indias
df_agrupado_Cart = new_df[new_df['Ciudad_de_ubicación'] == 'Cartagena de Indias']
#df_agrupado_Cart.head()

df_agrupado2_Cart= df_agrupado_Cart.groupby(["Fecha_diagnostico"]).agg({"Confirmados":'sum',"Recuperados":'sum',"Activos":'sum',"Muertos":'sum'})
#df_agrupado2_Cart.head()

##Se crean las columnas con la frecuencia acumulada por tipo de casos

df_agrupado2_Cart["Confirmados_acum"] =df_agrupado2_Cart["Confirmados"].cumsum()
df_agrupado2_Cart["Recuperados_acum"] =df_agrupado2_Cart["Recuperados"].cumsum()
df_agrupado2_Cart["Activos_acum"] =df_agrupado2_Cart["Activos"].cumsum()
df_agrupado2_Cart["Muertos_acum"] =df_agrupado2_Cart["Muertos"].cumsum()
#df_agrupado2_Cart.head()

df_agrupado2_Cart["Días"]=df_agrupado2_Cart.index-df_agrupado2_Cart.index.min()
df_agrupado2_Cart["Días"]=df_agrupado2_Cart["Días"].dt.days

#df_agrupado2_Cart.tail(10)

##Se eliminan los últimos 4 días debido a que se observan retrasos en la información de recuperados y muertes
df_agrupado2_Cart = df_agrupado2_Cart[:-4]

#df_agrupado2_Cart.tail(10)

"""# Resumen inicial, estado actual Cartagena de Indias"""

##Se presenta un resumen general acumulado del estado actual de casos
"""
print("Informacion General Cartellín ")
print("Número total de casos confirmados en Cartellín: ",df_agrupado2_Cart["Confirmados_acum"].iloc[-1])
print("Número total de casos recuperados en Cartellín: ",df_agrupado2_Cart["Recuperados_acum"].iloc[-1])
print("Número total de muertes en Cartellín: ",df_agrupado2_Cart["Muertos_acum"].iloc[-1])
print("Número total de casos Activos en Cartellín: ",df_agrupado2_Cart["Activos_acum"].iloc[-1])
print("Número aproximado de casos confirmados por día: ",np.round(df_agrupado2_Cart["Confirmados_acum"].iloc[-1]/df_agrupado2_Cart.shape[0]))
print("Número aproximado de casos recuperados por día: ",np.round(df_agrupado2_Cart["Recuperados_acum"].iloc[-1]/df_agrupado2_Cart.shape[0]))
print("Número aproximado de muertes por día: ",np.round(df_agrupado2_Cart["Muertos_acum"].iloc[-1]/df_agrupado2_Cart.shape[0]))
print("Nuevos casos confirmados: ",df_agrupado2_Cart["Confirmados_acum"].iloc[-1]-df_agrupado2_Cart["Confirmados_acum"].iloc[-2])
"""
##Se grafica el comportamiento del crecimiento semanal por tipo de casos

df_agrupado2_Cart["Semana"]=df_agrupado2_Cart.index.weekofyear

semana_num=[]
semana_confirmados=[]
semana_recuperados=[]
semana_muertos=[]
w=1
for i in list(df_agrupado2_Cart["Semana"].unique()):
    semana_confirmados.append(df_agrupado2_Cart[df_agrupado2_Cart["Semana"]==i]["Confirmados_acum"].iloc[-1])
    semana_recuperados.append(df_agrupado2_Cart[df_agrupado2_Cart["Semana"]==i]["Recuperados_acum"].iloc[-1])
    semana_muertos.append(df_agrupado2_Cart[df_agrupado2_Cart["Semana"]==i]["Muertos_acum"].iloc[-1])
    semana_num.append(w)
    w=w+1

crecimiento=go.Figure()
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_confirmados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos confirmados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_recuperados,
                    mode='lines+markers',
                    name='Crecimiento semanal casos recuperados'))
crecimiento.add_trace(go.Scatter(x=semana_num, y=semana_muertos,
                    mode='lines+markers',
                    name='Crecimiento semanal muertos'))
crecimiento.update_layout(title="Crecimiento semanal por tipo de casos en Cartagena de Indias",
                 xaxis_title="Semana",yaxis_title="Número de casos",legend=dict(x=0,y=1,traceorder="normal"))
crecimiento.write_image("images/cart_crecimiento.png")

##Se Cartcula las tasas de mortalidad y recuperación
df_agrupado2_Cart["Tasa de mortalidad"]=(df_agrupado2_Cart["Muertos_acum"]/df_agrupado2_Cart["Confirmados_acum"])*100
df_agrupado2_Cart["Tasa de recuperación"]=(df_agrupado2_Cart["Recuperados_acum"]/df_agrupado2_Cart["Confirmados_acum"])*100
#print("Tasa de mortalidad promedio",df_agrupado2_Cart["Tasa de mortalidad"].mean())
#print("Tasa de recuperación promedio",df_agrupado2_Cart["Tasa de recuperación"].mean())

##Se grafica el comportamiento de las tasas
Tasas = make_subplots(rows=2, cols=1,
                   subplot_titles=("Tasa de recuperación", "Tasa de mortalidad"))
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Cart.index, y=(df_agrupado2_Cart["Recuperados_acum"]/df_agrupado2_Cart["Confirmados_acum"])*100,name="Tasa de recuperación"),
    row=1, col=1
)
Tasas.add_trace(
    go.Scatter(x=df_agrupado2_Cart.index, y=(df_agrupado2_Cart["Muertos_acum"]/df_agrupado2_Cart["Confirmados_acum"])*100,name="Tasa de mortalidad"),
    row=2, col=1
)
Tasas.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder="normal"))
Tasas.update_xaxes(title_text="Fecha", row=1, col=1)
Tasas.update_yaxes(title_text="Tasa de recuperación", row=1, col=1)
Tasas.update_xaxes(title_text="Fecha", row=1, col=2)
Tasas.update_yaxes(title_text="Tasa de mortalidad", row=1, col=2)
#Tasas.show()

##Se grafica el factor de crecimiento de los tipos de casos
Factor_Crecimiento=go.Figure()
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Cart.index, y=df_agrupado2_Cart["Confirmados"]/df_agrupado2_Cart["Confirmados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos confirmados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Cart.index, y=df_agrupado2_Cart["Recuperados"]/df_agrupado2_Cart["Recuperados"].shift(),
                    mode='lines',
                    name='Factor de crecimiento casos recuperados'))
Factor_Crecimiento.add_trace(go.Scatter(x=df_agrupado2_Cart.index, y=df_agrupado2_Cart["Muertos"]/df_agrupado2_Cart["Muertos"].shift(),
                    mode='lines',
                    name='Factor de crecimiento muertes'))
Factor_Crecimiento.update_layout(title="Factor de crecimiento casos confirmados, recuperados y muertes",
                 xaxis_title="Fecha",yaxis_title="Factor de crecimiento",
                 legend=dict(x=0,y=-0.4,traceorder="normal"))
Factor_Crecimiento.write_image("images/cart_factor_crecimiento.png")

"""#Modelo de predicción AR para Cartagena de Indias

##Casos confirmados
"""

##Entrenamiento 
model_train_Cart_Con=df_agrupado2_Cart.iloc[:int(df_agrupado2_Cart.shape[0]*0.95)]
valid_Cart_Con=df_agrupado2_Cart.iloc[int(df_agrupado2_Cart.shape[0]*0.95):]
y_pred_Cart_Con=valid_Cart_Con.copy()

##Selección del modelo
model_ar_Cart_Con= auto_arima(model_train_Cart_Con["Confirmados_acum"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=5,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Cart_Con.fit(model_train_Cart_Con["Confirmados_acum"])

##Cálculo predicción
prediction_ar_Cart_Con=model_ar_Cart_Con.predict(len(valid_Cart_Con))
y_pred_Cart_Con["AR Predicción"]=prediction_ar_Cart_Con

##Métrica RMSE
model_scores_Cart_Conf=[]
model_scores_Cart_Conf.append(np.sqrt(mean_squared_error(y_pred_Cart_Con["Confirmados_acum"],y_pred_Cart_Con["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Cart_Con["Confirmados_acum"],y_pred_Cart_Con["AR Predicción"])))

##Graficando el modelo para los confirmados
Confirmados_Cart=go.Figure()
Confirmados_Cart.add_trace(go.Scatter(x=model_train_Cart_Con.index, y=model_train_Cart_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de entrenamiento para casos confirmados"))
Confirmados_Cart.add_trace(go.Scatter(x=valid_Cart_Con.index, y=valid_Cart_Con["Confirmados_acum"],
                    mode='lines+markers',name="Datos de validación para casos confirmados",))
Confirmados_Cart.add_trace(go.Scatter(x=valid_Cart_Con.index, y=y_pred_Cart_Con["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos confirmados",))
Confirmados_Cart.update_layout(title="Predicción casos confirmados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  confirmados",legend=dict(x=0,y=1,traceorder="normal"))
Confirmados_Cart.write_image("images/cart_confirmados.png")

#Crea datos de predicción a 30 días
nuevo_dia=[]
Prediccion_AR_Cart_Con=[]
for i in range(1,30):
    nuevo_dia.append(df_agrupado2_Cart.index[-1]+timedelta(days=i))
    Prediccion_AR_Cart_Con.append(model_ar_Cart_Con.predict(len(valid_Cart_Con)+i)[-1])

"""##Casos recuperados"""

##Se debe considerar que se observan retrasos en el reporte de casos al mostrar de forma consecutiva 0 recuperados y 0 muertes, teniendo en cuenta que aún hay casos activos en la región y que los casos no permanecen activos indefinidamente 
##Entrenamiento
model_train_Cart_recu=df_agrupado2_Cart.iloc[:int(df_agrupado2_Cart.shape[0]*0.95)]
valid_Cart_recu=df_agrupado2_Cart.iloc[int(df_agrupado2_Cart.shape[0]*0.95):]
y_pred_Cart_recu=valid_Cart_recu.copy()

##Selección
model_ar_Cart_recu= auto_arima(model_train_Cart_recu["Recuperados"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=7,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar_Cart_recu.fit(model_train_Cart_recu["Recuperados"])

##Predicción
prediction_ar_Cart_recu=model_ar_Cart_recu.predict(len(valid_Cart_recu))
y_pred_Cart_recu["AR Predicción"]=prediction_ar_Cart_recu

#Métrica RMSE
model_scores_Cart_recu=[]
model_scores_Cart_recu.append(np.sqrt(mean_squared_error(y_pred_Cart_recu["Recuperados"],y_pred_Cart_recu["AR Predicción"])))
#print("RMSE para modelo AR: ",np.sqrt(mean_squared_error(y_pred_Cart_recu["Recuperados"],y_pred_Cart_recu["AR Predicción"])))

##Graficando el modelo para los recuperados
Recuperados_Cart=go.Figure()
Recuperados_Cart.add_trace(go.Scatter(x=model_train_Cart_recu.index, y=model_train_Cart_recu["Recuperados"],
                    mode='lines+markers',name="Datos de entrenamiento para casos recuperados"))
Recuperados_Cart.add_trace(go.Scatter(x=valid_Cart_recu.index, y=valid_Cart_recu["Recuperados"],
                    mode='lines+markers',name="Datos de validación para casos recuperados",))
Recuperados_Cart.add_trace(go.Scatter(x=valid_Cart_recu.index, y=y_pred_Cart_recu["AR Predicción"],
                    mode='lines+markers',name="Predicción de casos recuperados",))
Recuperados_Cart.update_layout(title="Predicción casos recuperados modelo AR",
                 xaxis_title="Fecha",yaxis_title="Casos  recuperados",legend=dict(x=0,y=1,traceorder="normal"))
Recuperados_Cart.write_image("images/cart_recuperados.png")

#Crea datos de predicción a 30 días
Prediccion_AR_Cart_recu=[]
for i in range(1,30):
    Prediccion_AR_Cart_recu.append(model_ar_Cart_recu.predict(len(valid_Cart_recu)+i)[-1])

"""##Muertes"""

##Entrenamiento
model_train_Cart_M=df_agrupado2_Cart.iloc[:int(df_agrupado2_Cart.shape[0]*0.90)]
valid_Cart_M=df_agrupado2_Cart.iloc[int(df_agrupado2_Cart.shape[0]*0.90):]
y_pred_Cart_M=valid_Cart_M.copy()

##Selección
model_sarima_Cart_M= auto_arima(model_train_Cart_M["Muertos"],trace=True, error_action='ignore', 
                         start_p=0,start_q=0,max_p=2,max_q=2,m=7,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima_Cart_M.fit(model_train_Cart_M["Muertos"])

#Predicción
prediction_sarima_Cart_M=model_sarima_Cart_M.predict(len(valid_Cart_M))
y_pred_Cart_M["SARIMA Model Prediction"]=prediction_sarima_Cart_M

#Métricas RMSE
model_scores_Cart_M=[]
model_scores_Cart_M.append(np.sqrt(mean_squared_error(y_pred_Cart_M["Muertos"],y_pred_Cart_M["SARIMA Model Prediction"])))
#print("RMSE para modelo SARIMA: ",np.sqrt(mean_squared_error(y_pred_Cart_M["Muertos"],y_pred_Cart_M["SARIMA Model Prediction"])))

#Gráfica SARIMA Muertes
Muertes_Cart=go.Figure()
Muertes_Cart.add_trace(go.Scatter(x=model_train_Cart_M.index, y=model_train_Cart_M["Muertos"],
                    mode='lines+markers',name="Datos de entrenamiento para muertes"))
Muertes_Cart.add_trace(go.Scatter(x=valid_Cart_M.index, y=valid_Cart_M["Muertos"],
                    mode='lines+markers',name="Datos de validación para muertes",))
Muertes_Cart.add_trace(go.Scatter(x=valid_Cart_M.index, y=y_pred_Cart_M["SARIMA Model Prediction"],
                    mode='lines+markers',name="Predicción para muertes",))
Muertes_Cart.update_layout(title="Predicción muertes modelo SARIMA",
                 xaxis_title="Fecha",yaxis_title="Muertes",legend=dict(x=0,y=1,traceorder="normal"))
Muertes_Cart.write_image("images/cart_muertes.png")

#Se crean datos de predicción a 30 días
Prediccion_SARIMA_Cart_M=[]
for i in range(1,30):
    Prediccion_SARIMA_Cart_M.append(model_sarima_Cart_M.predict(len(valid_Cart_M)+i)[-1])

"""#Resumen general predicción casos confirmados, nuevos, activos, recuperados y muertes Cartagena de Indias"""

##Se tiene en cuenta que dada la reapertura se tiene una expectativa de crecimiento de los nuevos casospor lo cual se consideran los modelos evaluados pensando en ese escenario

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Predicciones_Cart=zip(nuevo_dia,Prediccion_AR_Cart_Con,Prediccion_AR_Cart_recu,Prediccion_SARIMA_Cart_M )
Predicciones_Cart=pd.DataFrame(list(Predicciones_Cart), columns=["Fechas","Modelo AR Confirmados","Modelo AR Recuperados", "Modelo SARIMA Muertes"])
#Predicciones_Cart.head()

##Predicciones 1ra semana
Predicciones_Cart["Activos"]= Predicciones_Cart["Modelo AR Confirmados"]-Predicciones_Cart["Modelo AR Recuperados"]-Predicciones_Cart["Modelo SARIMA Muertes"]
Predicciones_Cart["Nuevos"]= Predicciones_Cart["Modelo AR Confirmados"].diff()

#Predicciones_Cart.head(7)

##Predicciones cuarta semana
#Predicciones_Cart.tail(7)

"""##Intervalos de confianza"""

Int_Conf = sms.DescrStatsW(y_pred_Cart_Con["AR Predicción"]).tconfint_mean()
Int_Recu = sms.DescrStatsW(y_pred_Cart_recu["AR Predicción"]).tconfint_mean()
Int_Muertos = sms.DescrStatsW(y_pred_Cart_M["SARIMA Model Prediction"]).tconfint_mean()

pd.set_option('display.float_format', lambda x: '%.6f' % x)
Intervalos_Cart=zip(Int_Conf,Int_Recu,Int_Muertos)
Intervalos_Cart=pd.DataFrame(list(Intervalos_Cart),  columns=["Int_Confirmados","Int_Recuperados", "Int_Muertes"])
#Intervalos_Cart

"""##Métricas"""

Error_Cart=zip(model_scores_Cart_Conf,model_scores_Cart_recu,model_scores_Cart_M)
Error_Cart=pd.DataFrame(list(Error_Cart), columns=["RMSE_Confirmados","RMSE_Recuperados", "RMSE_Muertes"])
#Error_Cart